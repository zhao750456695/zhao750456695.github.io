{"meta":{"title":"FinGeek","subtitle":null,"description":null,"author":"JieZhao","url":"http://yoursite.com"},"pages":[{"title":"Categories","date":"2018-03-28T10:44:00.000Z","updated":"2018-03-28T10:50:55.970Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"tensorflow2","slug":"tensorflow2","date":"2018-04-12T05:19:27.000Z","updated":"2018-04-12T05:21:22.532Z","comments":true,"path":"2018/04/12/tensorflow2/","link":"","permalink":"http://yoursite.com/2018/04/12/tensorflow2/","excerpt":"","text":"Tensorflow3.1 张量、计算图、会话基于Tensorflow的NN：用张量表示数据，用计算图搭建神经网络，用会话执行计算图，优化线上的权重(参数)，得到模型。 张量（tensor）：多维数组（列表） 阶：张量的维数 维数 阶 名字 例子 0-D 0 标量 scalar s=1 2 3 1-D 1 向量 vector v=[1,2,3] 2-D 2 矩阵 matrix m[[1,2,3],[4,5,6],[7,8,9]] 二维数组 n-D n 张量 tensor t=[[[… n个 方括号有几个就是几阶的 张量可以表示0阶到n阶数组(列表) 数据类型tf.float32 tf.int32 加法运算 123456import tensorflow as tfa = tf.constant([1.0, 2.0]) # 定义张量a constant常数b = tf.constant([3.0, 4.0]) # 定义张量b result = a+bprint(result) 结果是： 12Tensor(&quot;add:0&quot;, shape=(2,), dtype=float32)#result是一个名为&apos;add:0&apos;的张量，add是节点名，0表示第0个输出。shape是维度，因为这里是一维数组，只有一个元素2，表示一维数组长度为2，dtype是数据类型。 计算图计算图（Graph）:搭建神经网络的计算过程，只搭建，不运算。 上面是神经元的基本模型，其实就是数学里的乘加运算 1234x = tf.constant([[1.0, 2.0]])w = tf.constant([[3.0], [4.0]])y = tf.matmul(x, w)print(y) 123Tensor(\"MatMul:0\", shape=(1, 1), dtype=float32)# shape中有两个元素，是两维的，一行一列# 只搭建了一个图 想执行图就必须用到会话了 会话（Session）：执行计算图中的节点运算。 用with 1234with tf.Session() as sess: print(sess.run(y))# Session首字母大写# sess.run()运行 123456x = tf.constant([[1.0, 2.0]])w = tf.constant([[3.0], [4.0]])y = tf.matmul(x, w)print(y)with tf.Session() as sess: print(sess.run(y)) 结果是 1[[ 11.]] ubuntu下运行出现一些警告信息 可以把它们去掉 1vim ~/.bashrc 把tensorflow的提示登记降低，加入下面这句 1export TF_CPP_MIN_LOG_LEVEL=2 然后，让配置文件生效 1source ~/.bashrc 3.2 前向传播 初值随机生成，用tf.Variable()意为生成随机数，V要大写，生成方式写在括号里 上图中随机种子如果去掉每次生成的随机数将不一致 标准差、均值、随机种子可以不写 除了tf.random_normal()，还有很多随机数生成方式，如tf.truncated_normal()如果生成出的随机数超过平均值两个标准差将重新生成，tf.random_uniform()等 除了随机数，还可以生成常量 方式 描述 举例 tf.ones 全1数组 tf.ones([3,2],int32)生成[[1,1],[1,1][1,1]] tf.fill 全定值数组 tf.fill([3,2],6)生成[[6,6],[6,6],[6,6]] tf.constant 直接给值 tf.constant([3,2,1])生成[3,2,1] tf.zeros 全0数组 tf.zeros([3,2],int32)生成[[0,0],[0,0][0,0]] 神经网络的实现过程： 1、准备数据集，提取特征，作为输入喂给神经网络（Netural Network,NN） 2、搭建NN结构，从输入到输出（先搭建计算图，再用会话执行） （NN前向传播算法———-&gt;计算输出） 3、大量特征数据喂给NN，迭代优化NN参数 （NN反向传播算法———-&gt;优化参数训练模型） 4、使用训练好的模型预测和分类 因此，神经网络的使用过程可以分两步：1-3的循环迭代是第一步，即训练，4是第二步，是使用过程。 一旦参数优化完成就可以固定这些参数实现特定应用，很多现实应用中会使用成熟的现有网络结构，喂入新的数据，训练相应模型，判断是否能对喂入的、从未见过的新数据做出正确的响应。再适当更改网络结构、反复迭代，让机器自动训练参数，找出最优结构和参数，固定专有网络。 前向传播 第一层的w前面有两个两个节点，后面有三个节点，因此是个两行三列的矩阵 a是第一个计算层，一般说神经网络共有几层、当前是第几层都是指的计算层，输入不是计算层，因此a是第一层网络 第二层的参数w前面是是3个节点、后面是1个节点，因此是三行一列的矩阵 tf.placeholder()中shape第一个元素表示几组数据，第二个元素表示每组数据有几个特征 12345678910111213141516import tensorflow as tf# 两层简单的神经网络(全连接)x = tf.constant([[0.7, 0.5]])w1 = tf.Variable(tf.random_normal([2, 3], stddev=1, seed=1))w2 = tf.Variable(tf.random_normal([3, 1], stddev=1, seed=1))# 定义前向传播过程a = tf.matmul(x, w1)y = tf.matmul(a, w2)with tf.Session() as sess: init_op = tf.global_variables_initializer() # 初始化 sess.run(init_op) print('y in tf3.py is :\\n', sess.run(y)) 结果： 12y in tf3.py is : [[ 3.0904665]] 123456789101112131415161718import tensorflow as tf# 两层简单的神经网络# 定义输入和参数# 用placeholder实现输入定义 （see.run中喂一组数据）x = tf.placeholder(tf.float32, shape=(1, 2))w1 = tf.Variable(tf.random_normal([2, 3], stddev=1, seed=1))w2 = tf.Variable(tf.random_normal([3, 1], stddev=1, seed=1))# 定义前向传播过程a = tf.matmul(x, w1)y = tf.matmul(a, w2)# 用会话计算结果with tf.Session() as sess: init_op = tf.global_variables_initializer() sess.run(init_op) print('y in tf3_4.py is:\\n', sess.run(y, feed_dict=&#123;x: [[0.7, 0.5]]&#125;)) 结果是： 12y in tf3_4.py is: [[ 3.0904665]] 1234567891011121314151617# 定义输入和参数# 用placeholder实现输入定义 （see.run中喂多组数据）x = tf.placeholder(tf.float32, shape=(None, 2)) # 不知道喂多少组，第一个元素是Nonew1 = tf.Variable(tf.random_normal([2, 3], stddev=1, seed=1))w2 = tf.Variable(tf.random_normal([3, 1], stddev=1, seed=1))# 定义前向传播过程a = tf.matmul(x, w1)y = tf.matmul(a, w2)# 用会话计算结果with tf.Session() as sess: init_op = tf.global_variables_initializer() sess.run(init_op) print('y in tf3_4.py is:\\n', sess.run(y, feed_dict=&#123;x: [[0.7, 0.5], [0.2, 0.3], [0.3 , 0.4], [0.4, 0.5]]&#125;)) print('w1:\\n', sess.run(w1)) print('w2:\\n', sess.run(w2)) 结果是： 123456789101112y in tf3_4.py is: [[ 3.0904665 ] [ 1.2236414 ] [ 1.72707319] [ 2.23050475]]w1: [[-0.81131822 1.48459876 0.06532937] [-2.4427042 0.0992484 0.59122431]]w2: [[-0.81131822] [ 1.48459876] [ 0.06532937]] 3.3 反向传播 搭建神经网络的八股：准备、前传、后传、迭代 0准备 import ​ 常量定义 ​ 生成数据集 1前向传播： 定义输入、参数和输出 ​ x= ​ y_= ​ w1= ​ w2= ​ a= ​ y= 2反向传播：定义损失函数、反向传播方法 ​ loss= ​ train_step= 3生成对话，训练STEPS轮 with tf.Session() as sess ​ init_opt = tf.global_variables_initializer() ​ sess_run(init_op) ​ STEP = 3000 ​ for i in range(STEPS): ​ start = ​ end = ​ sess.run(train_step, feed_dict:)","categories":[{"name":"深度学习","slug":"深度学习","permalink":"http://yoursite.com/categories/深度学习/"}],"tags":[{"name":"tensorflow 深度学习","slug":"tensorflow-深度学习","permalink":"http://yoursite.com/tags/tensorflow-深度学习/"}]},{"title":"R语言part1","slug":"R语言part1","date":"2018-04-12T00:38:33.000Z","updated":"2018-04-12T00:42:16.874Z","comments":true,"path":"2018/04/12/R语言part1/","link":"","permalink":"http://yoursite.com/2018/04/12/R语言part1/","excerpt":"","text":"R语言R是S语言的一种实现。 工具：Rstudio 安装 install.package(‘ggplot2’) 加载包 library(ggplot2) 更新包 update.packages() help() 查看帮助信息 也可以用？号 setwd(“E://Rworkdirectory”) 设置工作目录 向量和矩阵c() 创建向量 1234567891011&gt; v = c(1, 4, 4, 3, 2)&gt; v[1] 1 4 4 3 2&gt; y = c('a', 'b', 'c')&gt; y[1] \"a\" \"b\" \"c\"a = c(1:10) # 包括10&gt; a [1] 1 2 3 4 5 6 7 8 9 10 length() 向量的长度 12&gt; length(y)[1] 3 mode(v) 123456&gt; mode(v)[1] \"numeric\"&gt; x = c(1, 'a', 3)&gt; mode(x)[1] \"character\" rbind() 按行合成矩阵 1234567891011&gt; rbind(v, y) [,1] [,2] [,3] [,4] [,5]v \"1\" \"4\" \"4\" \"3\" \"2\" y \"a\" \"b\" \"c\" \"a\" \"b\" Warning message:In rbind(v, y) : number of columns of result is not a multiple of vector length (arg 2)&gt; rbind(x, y) [,1] [,2] [,3]x \"1\" \"a\" \"3\" y \"a\" \"b\" \"c\" cbind() 按列合成矩阵 123456789101112131415&gt; cbind(x, y) x y [1,] &quot;1&quot; &quot;a&quot;[2,] &quot;a&quot; &quot;b&quot;[3,] &quot;3&quot; &quot;c&quot;&gt; cbind(v, y) v y [1,] &quot;1&quot; &quot;a&quot;[2,] &quot;4&quot; &quot;b&quot;[3,] &quot;4&quot; &quot;c&quot;[4,] &quot;3&quot; &quot;a&quot;[5,] &quot;2&quot; &quot;b&quot;Warning message:In cbind(v, y) : number of rows of result is not a multiple of vector length (arg 2) 求平均值、和、连乘、最值、方差、标准差123456789101112131415&gt; x = c(1,10)&gt; mean(x)[1] 5.5&gt; sum(x)[1] 11&gt; max(x)[1] 10&gt; min(x)[1] 1&gt; var(x) # 方差[1] 40.5&gt; sd(x) # 标准差[1] 6.363961&gt; prod(x) # 连乘[1] 10 产生向量1234567891011121314151617181920212223242526272829303132333435363738&gt; 1:10 [1] 1 2 3 4 5 6 7 8 9 10&gt; 1:10-1 [1] 0 1 2 3 4 5 6 7 8 9&gt; 1:10*2 [1] 2 4 6 8 10 12 14 16 18 20&gt; 2:10*2+1[1] 5 7 9 11 13 15 17 19 21&gt; a=2:10*2+1&gt; a[5][1] 13&gt; a[-5] # 除第5个元素之外的元素[1] 5 7 9 11 15 17 19 21&gt; a[-(1:5)] # 除1:5之外的元素[1] 15 17 19 21&gt; a[1:5][1] 5 7 9 11 13&gt; a[c(2,4,7)] # 向量的元素是下标 必须有c 直接写2,4,7会出错[1] 7 11 17&gt; a[(2, 4, 7)]Error: unexpected ',' in \"a[(2,\"&gt; a[a&lt;6] # 条件取值[1] 5&gt; a[a&gt;8&amp;a&lt;19][1] 9 11 13 15 17&gt; a[a[3]][1] 21 产生向量seq()函数 类似python中的range 12345678&gt; seq(5,10)[1] 5 6 7 8 9 10&gt; seq(5,10,by=2) # 公差为2[1] 5 7 9&gt; seq(5,10,length=3) # 第一项是5，最后一项是10，总长度为3,自动指定公差[1] 5.0 7.5 10.0 产生字母序列letters 产生26个字母顺序的向量 1234&gt; letters[1:30] [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"[11] \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\"[21] \"u\" \"v\" \"w\" \"x\" \"y\" \"z\" NA NA NA NA which函数 找向量中的元素的下标 R的下标从1开始 123456789101112131415161718&gt; a=c(2,3,4,5,6,7,8,9,5,10,2,3,6)&gt; which.max(a)[1] 10&gt; which.min(a)[1] 1&gt; a[which.max(a)] # 取到最大元素[1] 10&gt; which(a==2)[1] 1 11&gt; which(a&gt;5)[1] 5 6 7 8 10 13&gt; a[which(a&gt;5)][1] 6 7 8 9 10 6 rev()函数 颠倒向量 python中的reversed sort()函数 对向量进行排序 123456789101112&gt; a=1:10&gt; a [1] 1 2 3 4 5 6 7 8 9 10&gt; rev(a) [1] 10 9 8 7 6 5 4 3 2 1&gt; sort(a) [1] 1 2 3 4 5 6 7 8 9 10&gt; rev(sort(a)) [1] 10 9 8 7 6 5 4 3 2 1 生成矩阵方法1：将向量定义成数组 向量只有定义了维数向量(dim属性)后才能被看作是数组. 1234567&gt; z=1:12;&gt; dim(z)=c(3,4);&gt; z; [,1] [,2] [,3] [,4][1,] 1 4 7 10[2,] 2 5 8 11[3,] 3 6 9 12 注意：生成矩阵是按列排列的 方法2：用array ( )函数构造多维数组 用法为：array(data=NA,dim=length(data),dimnames=NULL) 参数描述：data：是一个向量数据。 dim：是数组各维的长度，缺省时为原向量的长度。 dimname：是数组维的名字，缺省时为空。 1234567&gt; x=array(1:20,dim=c(4,5))&gt; x [,1] [,2] [,3] [,4] [,5][1,] 1 5 9 13 17[2,] 2 6 10 14 18[3,] 3 7 11 15 19[4,] 4 8 12 16 20 方法3：matrix()函数 123456789101112131415161718192021&gt; a1=c(1:12)&gt; matrix(a1, nrow = 3, ncol = 4) [,1] [,2] [,3] [,4][1,] 1 4 7 10[2,] 2 5 8 11[3,] 3 6 9 12&gt; matrix(a1, nrow = 4, ncol = 3) [,1] [,2] [,3][1,] 1 5 9[2,] 2 6 10[3,] 3 7 11[4,] 4 8 12&gt; matrix(a1, nrow = 4, ncol = 3, byrow = T) # 将向量的元素按行生成矩阵 默认是按列的 [,1] [,2] [,3][1,] 1 2 3[2,] 4 5 6[3,] 7 8 9[4,] 10 11 12 矩阵运算t() 转置 矩阵加减 两个矩阵必须有相等的维数 12345678910111213141516171819202122232425262728&gt; a=matrix(1:12, nrow = 3, ncol = 4)&gt; a [,1] [,2] [,3] [,4][1,] 1 4 7 10[2,] 2 5 8 11[3,] 3 6 9 12&gt; t(a) [,1] [,2] [,3][1,] 1 2 3[2,] 4 5 6[3,] 7 8 9[4,] 10 11 12&gt; a = b = matrix(1:12, nrow = 3, ncol = 4)&gt; a+b [,1] [,2] [,3] [,4][1,] 2 8 14 20[2,] 4 10 16 22[3,] 6 12 18 24&gt; a-b [,1] [,2] [,3] [,4][1,] 0 0 0 0[2,] 0 0 0 0[3,] 0 0 0 0 diag() 12345678910111213141516171819202122232425&gt; a = matrix(1:16, nrow = 4, ncol = 4)&gt; a [,1] [,2] [,3] [,4][1,] 1 5 9 13[2,] 2 6 10 14[3,] 3 7 11 15[4,] 4 8 12 16&gt; diag(a) # 返回a的对角线 参数为矩阵[1] 1 6 11 16&gt; diag(diag(a)) # 生成以向量为对角线，其他元素为0的矩阵 对角阵 参数为向量 [,1] [,2] [,3] [,4][1,] 1 0 0 0[2,] 0 6 0 0[3,] 0 0 11 0[4,] 0 0 0 16&gt; diag(4) # 生成对角线为1的矩阵 生成4阶的单位矩阵 参数为数字 [,1] [,2] [,3] [,4][1,] 1 0 0 0[2,] 0 1 0 0[3,] 0 0 1 0[4,] 0 0 0 1 矩阵相乘 12345678910111213141516171819202122&gt; a = matrix(1:12, nrow = 3, ncol = 4)&gt; b = matrix(1:12, nrow = 4, ncol = 3)&gt; a [,1] [,2] [,3] [,4][1,] 1 4 7 10[2,] 2 5 8 11[3,] 3 6 9 12&gt; b [,1] [,2] [,3][1,] 1 5 9[2,] 2 6 10[3,] 3 7 11[4,] 4 8 12&gt; a%*%b # %*% [,1] [,2] [,3][1,] 70 158 246[2,] 80 184 288[3,] 90 210 330 矩阵求逆 函数rnorm # 生成元素服从正态分布随机向量 12&gt; rnorm(5)[1] 1.8601560 -1.7178636 -2.4462399 2.5793574 0.7827795 solve 求逆 123456789101112131415&gt; a=matrix(rnorm(16), 4, 4) # 产生16个服从正态分布的随机数作为4*4矩阵的元素&gt; a [,1] [,2] [,3] [,4][1,] -0.16531328 0.9072305 1.3297686 0.1271754[2,] -0.24630802 -1.2505458 -0.1610357 -0.5416087[3,] 0.05559855 -0.5120084 -1.1443766 -0.1697620[4,] 0.44153601 0.4104748 1.2128257 0.7307340&gt; solve(a) # 求逆 [,1] [,2] [,3] [,4][1,] 83.190766 18.867893 124.02640 28.319692[2,] 13.810035 2.364525 19.93229 3.979692[3,] 8.584077 2.317661 11.95562 3.001353[4,] -72.271687 -16.575594 -105.98098 -22.960262 solve还可以用来解线性方程组 12345678910111213141516&gt; a = matrix(rnorm(16), 4, 4)&gt; a [,1] [,2] [,3] [,4][1,] 0.89482889 1.8837770 1.26222754 -0.1907849[2,] -1.97078241 -1.1719388 0.77151849 0.4038480[3,] -0.02239332 1.4707221 0.93798354 0.2047112[4,] 0.25772996 -0.1725366 -0.02908542 -0.2212694&gt; b = c(1:4)&gt; b[1] 1 2 3 4&gt; solve(a, b)[1] -46.89120 29.48648 -23.95866 -92.53838 矩阵的特征值与特征向量 eigen() 1234567891011121314151617181920212223242526&gt; a = diag(4)+1&gt; a [,1] [,2] [,3] [,4][1,] 2 1 1 1[2,] 1 2 1 1[3,] 1 1 2 1[4,] 1 1 1 2&gt; a.e=eigen(a, symmetric = T)&gt; a.eeigen() decomposition$values[1] 5 1 1 1$vectors [,1] [,2] [,3] [,4][1,] -0.5 0.8660254 0.0000000 0.0000000[2,] -0.5 -0.2886751 -0.5773503 -0.5773503[3,] -0.5 -0.2886751 -0.2113249 0.7886751[4,] -0.5 -0.2886751 0.7886751 -0.2113249&gt; a.e$vectors%*%diag(a.e$values)%*%t(a.e$vectors) [,1] [,2] [,3] [,4][1,] 2 1 1 1[2,] 1 2 1 1[3,] 1 1 2 1[4,] 1 1 1 2 数组数组可以看出加上了维度的向量 矩阵是二维数组，但数组还有三维、四维等等更高维度 1234567891011121314151617181920212223&gt; x=c(1:6)&gt; x[1] 1 2 3 4 5 6&gt; is.vector(x)[1] TRUE&gt; is.array(x)[1] FALSE&gt; dim(x)&lt;-c(2, 3) # &lt;-是赋值，和=一样&gt; x [,1] [,2] [,3][1,] 1 3 5[2,] 2 4 6&gt; is.array(x)[1] TRUE&gt; is.matrix(x)[1] TRUE 数据框矩阵形式相同，是二维表单，但列可以是不同数据类型，矩阵和数组的列只能数值的 每列是一个变量，每行是一个观测值 类似pandas中的DataFrame 12345678910111213141516171819# x y 向量的长度必须相等&gt; x=c(1:10)&gt; y=c('a', 'b', 'c', 'c', 'd', 'c', 'e', 'f', 'g', 'h')&gt; z=data.frame(x, y)&gt; z x y1 1 a2 2 b3 3 c4 4 c5 5 d6 6 c7 7 e8 8 f9 9 g10 10 h 1234567891011121314# 替换列头&gt; (m=data.frame('id'=x, '代号'=y)) id 代号1 1 a2 2 b3 3 c4 4 c5 5 d6 6 c7 7 e8 8 f9 9 g10 10 h 画散点图 plot() 读数据文本文件先设置工作目录，把文本文件放于该目录下，读文件时可以省去路径，若不放在工作目录中，则要写全完整的路径 1234567891011&gt; (x=read.table('rabc.txt')) V1 V21 175 672 183 753 165 564 145 455 178 676 187 987 156 438 176 589 173 68 读剪切板文本或excel的数据均可通过剪切板操作 复制一下，然后运行下列语句，导入剪切板的数据： 12345678910111213&gt; y&lt;-read.table('clipboard', header=F)&gt; y V1 V2 V31 1 1 a2 2 2 b3 3 3 c4 4 4 c5 5 5 d6 6 6 c7 7 7 e8 8 8 f9 9 9 g10 10 10 h 读excel文件方法1：先把excel另存为空格分隔的prn文本格式再读 123456789&gt; W&lt;-read.table('ex.prn', header = T)&gt; W 商品 价格1 A 12 b 33 C 54 D 85 E 10 或另存为csv格式 12345678&gt; w=read.csv(&apos;ex.csv&apos;, header = T)&gt; W 商品 价格1 A 12 b 33 C 54 D 85 E 10 方法2：安装RODBC包，再通过ODBC读 ODBC，中文意思是【开放数据库连接】，其英文全称是【Open Database Connectivity】，是开放服务结构中有关数据库的一个组成部分，它提供了一组对数据库访问的标准API（应用程序编程接口）。 举个例子，城市（数据库）和小镇（数据分析软件）之间，有一条高速路，这条路就可以视为ODBC，并且资源（数据）通过这条路在城市和小镇间传输。 RODBC包，顾名思义，就是为R语言服务的，操作ODBC的包。关于其所有的内容可以访问页面，https://cran.r-project.org/web/packages/RODBC/，在其中的RODBC.pdf文件内有详细介绍。 1234567891011121314151617181920212223&gt; Z&lt;-odbcConnectExcel(&apos;ex.xls&apos;)Error in odbcConnectExcel(&quot;ex.xls&quot;) : odbcConnectExcel is only usable with 32-bit Windows&gt; z&lt;-odbcConnectExcel2007(&apos;ex.xlsx&apos;)&gt; zRODBC Connection 2Details: case=nochange DBQ=E:\\Rworkdirectory\\ex.xlsx DefaultDir=E:\\Rworkdirectory Driver=&#123;Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)&#125; DriverId=1046 MaxBufferSize=2048 PageTimeout=5 &gt; (w&lt;-sqlFetch(z, &apos;Sheet1&apos;)) 商品 价格1 A 12 b 33 C 54 D 85 E 10 循环语句for语句 123456&gt; for (i in 1:59)&#123;a[i]=i*2+3&#125;&gt; a [1] 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43[21] 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83[41] 85 87 89 91 93 95 97 99 101 103 105 107 109 111 113 115 117 119 121 while语句 12345678910&gt; a[1]=5&gt; i=1&gt; while(a[i]&lt;121)&#123;i=i+1;a[i]=a[i-1]+2&#125;&gt; a [1] 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43[21] 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83[41] 85 87 89 91 93 95 97 99 101 103 105 107 109 111 113 115 117 119 121 R脚本source()函数 运行r脚本，在监控台输入source(&#39;脚本路径&#39;) print()函数 脚本中用print函数显示结果 分布函数正态分布函数rnorm() 泊松分布函数rpois() 指数分布函数rexp() Gamma分布函数rgamma() 均匀分布函数runif() 二项分布函数rbinom() 几何分布函数rgeom() round() 四舍五入 写入文件x是数据框 write.table(x, file=’d:\\mark.txt’, col.names=F, row.names=F, sep=’ ‘) 对列求平均值 colMeans(x)[c(‘x1’, ‘x2’)] 对数据框x的名为x1、x2的列求平均值 apply(x, 2, mean) 对数据框在列的方向上求平均值 1是在行的方向上 apply(x[c(‘x1’, ‘x2’)], 1, sum) 对x数据框的x1、x2在行的方向上求和","categories":[{"name":"R语言","slug":"R语言","permalink":"http://yoursite.com/categories/R语言/"}],"tags":[{"name":"R语言 数据分析","slug":"R语言-数据分析","permalink":"http://yoursite.com/tags/R语言-数据分析/"}]},{"title":"requests","slug":"requests","date":"2018-04-07T04:03:50.000Z","updated":"2018-04-07T04:06:06.606Z","comments":true,"path":"2018/04/07/requests/","link":"","permalink":"http://yoursite.com/2018/04/07/requests/","excerpt":"","text":"Requests库urllib的代理设置和post等都比较繁琐，我们可以使用更方便的requests库。 Requests库是用Python语言编写，基于urllib，采用Apache2 Licensed开源协议的HTTP库。 12345678import requestsresponse=requests.get('https://www.baidu.com') # get请求print(type(response)) # &lt;class 'requests.models.Response'&gt;print(response.status_code) # 200print(type(response.text)) # &lt;class 'str'&gt;print(response.text) # 和urllib下urlopen的read方法得到的结果一样print(response.cookies) # &lt;RequestsCookieJar[&lt;Cookie BDORZ=27315 for .baidu.com/&gt;]&gt; 各种请求方式get请求 带参数的，在url中加入参数，最前面是？，用&amp;分隔 12response=requests.get('http://httpbin.org/get?name=germ&amp;age=22')print(response.text) 结果是： 123456789101112131415&#123; &quot;args&quot;: &#123; &quot;age&quot;: &quot;22&quot;, &quot;name&quot;: &quot;germ&quot; &#125;, &quot;headers&quot;: &#123; &quot;Accept&quot;: &quot;*/*&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, &quot;Connection&quot;: &quot;close&quot;, &quot;Host&quot;: &quot;httpbin.org&quot;, &quot;User-Agent&quot;: &quot;python-requests/2.18.4&quot; &#125;, &quot;origin&quot;: &quot;115.27.202.98&quot;, &quot;url&quot;: &quot;http://httpbin.org/get?name=germ&amp;age=22&quot;&#125; 这种直接在url中构造参数的方式太麻烦了，requests提供了字典的方式添加参数： 12response=requests.get('http://httpbin.org/get', params=data)print(response.text) 结果同上 12345response=requests.get('http://httpbin.org/get')print(type(response.text))print(json.loads(response.text))print(response.json())print(type(response.json())) 结果是： 1234&lt;class &apos;str&apos;&gt;&#123;&apos;args&apos;: &#123;&#125;, &apos;headers&apos;: &#123;&apos;Accept&apos;: &apos;*/*&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Connection&apos;: &apos;close&apos;, &apos;Host&apos;: &apos;httpbin.org&apos;, &apos;User-Agent&apos;: &apos;python-requests/2.18.4&apos;&#125;, &apos;origin&apos;: &apos;115.27.202.98&apos;, &apos;url&apos;: &apos;http://httpbin.org/get&apos;&#125;&#123;&apos;args&apos;: &#123;&#125;, &apos;headers&apos;: &#123;&apos;Accept&apos;: &apos;*/*&apos;, &apos;Accept-Encoding&apos;: &apos;gzip, deflate&apos;, &apos;Connection&apos;: &apos;close&apos;, &apos;Host&apos;: &apos;httpbin.org&apos;, &apos;User-Agent&apos;: &apos;python-requests/2.18.4&apos;&#125;, &apos;origin&apos;: &apos;115.27.202.98&apos;, &apos;url&apos;: &apos;http://httpbin.org/get&apos;&#125;&lt;class &apos;dict&apos;&gt; response.json()和json.loads(response.text)的结果完全一样，转码成json 获取二进制数据 1234response=requests.get('https://github.com/favicon.ico')print(type(response.text), type(response.content))print(response.text)print(response.content) 1234&lt;class &apos;str&apos;&gt; &lt;class &apos;bytes&apos;&gt;\u0012:\u0013\u0013\u0014�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0012\u0012\u0012�\u0013\u0013\u0013�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0013\u0013\u0013O \u0011\u0011\u0011L\u0015\u0015\u0017�\u0015\u0015\u0017�\u0013\u0013\u0013�\u0013\u0013\u0014�\u0015\u0015\u0017�\u0014\u0014\u0014� \u0002 \u0002\u0013\u0013\u0014�\u0015\u0015\u0017�\u0013\u0013\u0014�\u0013\u0013\u0014�\u0015\u0015\u0017�\u0014\u0014\u0014� \u0014\u0014\u0014�\u0015\u0015\u0017�\u0013\u0013\u0014�\u0014\u0014\u0014�\u0015\u0015\u0017�\u0013\u0013\u0014�\u000f\u000f\u000f! \u0010\u0010\u0010\u001f\u0013\u0013\u0014�\u0015\u0015\u0017�\u0014\u0014\u0014�\u0011\u0011\u0014�\u0015\u0015\u0017�\u0015\u0015\u0017�\u000f\u000f\u000f4 \u0010\u0010\u0010@\u0015\u0015\u0017�\u0015\u0015\u0017�\u0011\u0011\u0014�\u000e\u000e\u000e8\u0015\u0015\u0017�\u0015\u0015\u0017�\u0012\u0012\u0012� \u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018�333\u0005 ���\u0002\u0016\u0016\u0018t\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015+ \u0016\u0016\u0019R\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018t \u0015\u0015\u0018`\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0019R\u0015\u0015\u0019�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0018����\u0001 \u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0019�\u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0019\\ \u0016\u0016\u0019G\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018�\u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0017\u0017\u0017\u0016 \u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018�\u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017� \u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018�\u0016\u0016\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018� \u0015\u0015\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0017�\u0015\u0015\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018����\u0001 \u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0018�\u0015\u0015\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u001c\u001c\u001c% \u0010\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0018�\u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018v \u0015\u0015\u0018a\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018�\u0016\u0016\u0019G\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018�\u0019\u0019\u0019\u001f \u001b\u001b\u001b\u0013\u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0019G+++\u0006\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0019] \u0018\u0018\u0018I\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�+++\u0006 \u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0019\u0019\u00193 \u001a\u001a\u001a\u001e\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018� \u0015\u0015 \u0018\u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0018\u0018\u00185 \u0015\u0015+ \u0018\u0018\u0018*���\u0002 ���\u0001\u001b\u001b\u001b&amp;\u001e\u001e\u001e\u0011 \u0017\u0017\u0017!\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018�\u0015\u0015 \u0018 \u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0017\u0017\u0019f @@@\u0004\u0017\u0017\u0017b\u0016\u0016\u0017�\u0015\u0015\u0017�\u0016\u0016\u0017�\u0016\u0016\u0017�\u0015\u0015\u0018�\u0015\u0015\u0018�\u0016\u0016\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018�\u0015\u0015\u0018l+++\u0006 \u0016\u0016\u0019R\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018� $$$\u0007\u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0018�\u0015\u0015\u0018�\u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0018�\u0015\u0015\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018�$$$\u0007 \u0015\u0015 \u0018\u0015\u0015\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0018�\u0015\u0015 \u0018 \u0016\u0016\u001c.\u0015\u0015\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0018�\u0016\u0016\u001c. \u0015\u0015 \u0018\u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018�\u0015\u0015 \u0018 $$$\u0007\u0016\u0016\u0018�\u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018�\u0016\u0016\u0018�$$$\u0007 \u0015\u0015 \u0018\u0016\u0016\u0018�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0015\u0015\u0017�\u0016\u0016\u0018�\u0015\u0015 \u0018 +++\u0006\u0016\u0016\u0019G\u0016\u0016\u0018�\u0015\u0015\u0018�\u0015\u0015\u0018�\u0016\u0016\u0017�\u0016\u0016\u0017�\u0015\u0015\u0018�\u0015\u0015\u0018�\u0016\u0016\u0018�\u0016\u0016\u0019G+++\u0006 b&apos;\\x00\\x00\\x01\\x00\\x02\\x00\\x10\\x10\\x00\\x00\\x01\\x00 \\x00(\\x05\\x00\\x00&amp;\\x00\\x00\\x00 \\x00\\x00\\x01\\x00 \\x00(\\x14\\x00\\x00N\\x05\\x00\\x00(\\x00\\x00\\x00\\x10\\x00\\x00\\x00 \\x00\\x00\\x00\\x01\\x00 \\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x11\\x11\\x13v\\x13\\x13\\x13\\xc5\\x0e\\x0e\\x0e\\x12\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x0f\\x0f\\x11\\x11\\x11\\x14\\xb1\\x13\\x13\\x13i\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x14\\x14\\x14\\x96\\x13\\x13\\x14\\xfc\\x13\\x13\\x14\\xed\\x00\\x00\\x00\\x19\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x15\\x15\\x17\\xff\\x15\\x15\\x17\\xff\\x11\\x11\\x13\\x85\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x11\\x11\\x12\\xc1\\x13\\x13\\x14\\xee\\x11\\x11\\x11\\x1e\\x10\\x10\\x10\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\r\\x13\\x13\\x14\\xf5\\x15\\x15\\x17\\xff\\x15\\x15\\x17\\xff\\x11\\x11\\x14\\xaf\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x14\\x14\\x14\\x99\\x15\\x15\\x17\\xff\\x06\\x06\\x11,\\x0e\\x0e\\x0e\\\\\\x0f\\x0f\\x0f\\xc1\\x0f\\x0f\\x0f&quot;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x0f\\x0f4\\x10\\x10\\x10\\xff\\x15\\x15\\x17\\xff\\x15\\x15\\x17\\xff\\x15\\x15\\x17\\xff\\x14\\x14\\x14\\x8f\\x00\\x00\\x00\\x00\\x10\\x10\\x100\\x0f\\r\\x0f\\xff\\x00\\x00\\x00\\xf9\\x01\\x01\\x01\\xed\\x02\\x02\\x02\\xff\\x02\\x02\\x02\\xf6\\x0e\\x0e\\x0e8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x08\\x08@\\x02\\x02\\x02\\xeb\\x15\\x15\\x17\\xff\\x15\\x15\\x17\\xff\\x15\\x15\\x17\\xff\\x15\\x15\\x17\\xff\\x11\\x11\\x11-\\x14\\x14\\x15\\x9c\\x14\\x14\\x15\\xff\\x01\\x01\\x01\\xfc\\x0f\\x0f\\x11\\xfb\\r\\r\\x11;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\r\\r\\x12:\\x13\\x13\\x14\\xe7\\x15\\x15\\x17\\xff\\x15\\x15\\x17\\xff\\x12\\x12\\x12\\x9a\\x13\\x13\\x13\\xd9\\x15\\x15\\x17\\xff\\x15\\x15\\x17\\xff\\x13\\x13\\x13O\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x11\\x11\\x11L\\x15\\x15\\x17\\xff\\x15\\x15\\x17\\xff\\x13\\x13\\x13\\xda\\x13\\x13\\x14\\xf6\\x15\\x15\\x17\\xff\\x14\\x14\\x14\\xf0\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x13\\x13\\x14\\xf1\\x15\\x15\\x17\\xff\\x13\\x13\\x14\\xf6\\x13\\x13\\x14\\xf7\\x15\\x15\\x17\\xff\\x14\\x14\\x14\\xe1\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0&apos; 如何把二进制数据保存呢？写入文件即可： 123with open('./favicon.ico', 'wb') as f: f.write(response.content) f.close() 当前路径下会出现这个图片 添加headers 12345headers=&#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36',&#125;response=requests.get('https://www.zhihu.com/explore', headers=headers)print(response.text) post请求 123456data=&#123; &apos;name&apos;: &apos;germ&apos;, &apos;age&apos;: 22&#125;response=requests.post(&apos;http://httpbin.org/post&apos;, data=data)print(response.text) get中是params=data，post中是data=data，也可以在后面加头： response=requests.post(&#39;http://httpbin.org/post&#39;, data=data, headers=headers) 结果是，观察form $$ $$ 123456789101112131415161718192021&#123; &quot;args&quot;: &#123;&#125;, &quot;data&quot;: &quot;&quot;, &quot;files&quot;: &#123;&#125;, &quot;form&quot;: &#123; &quot;age&quot;: &quot;22&quot;, &quot;name&quot;: &quot;germ&quot; &#125;, &quot;headers&quot;: &#123; &quot;Accept&quot;: &quot;*/*&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, &quot;Connection&quot;: &quot;close&quot;, &quot;Content-Length&quot;: &quot;16&quot;, &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;Host&quot;: &quot;httpbin.org&quot;, &quot;User-Agent&quot;: &quot;python-requests/2.18.4&quot; &#125;, &quot;json&quot;: null, &quot;origin&quot;: &quot;115.27.202.98&quot;, &quot;url&quot;: &quot;http://httpbin.org/post&quot;&#125; 响应response属性 123456response=requests.get('http://www.jianshu.com')print(type(response.status_code), response.status_code)print(type(response.headers), response.headers)print(type(response.cookies), response.cookies)print(type(response.url), response.url)print(type(response.history), response.history) 结果是： 12345&lt;class &apos;int&apos;&gt; 200&lt;class &apos;requests.structures.CaseInsensitiveDict&apos;&gt; &#123;&apos;Date&apos;: &apos;Fri, 06 Apr 2018 04:50:47 GMT&apos;, &apos;Server&apos;: &apos;Tengine&apos;, &apos;Content-Type&apos;: &apos;text/html; charset=utf-8&apos;, &apos;Transfer-Encoding&apos;: &apos;chunked&apos;, &apos;X-Frame-Options&apos;: &apos;DENY&apos;, &apos;X-XSS-Protection&apos;: &apos;1; mode=block&apos;, &apos;X-Content-Type-Options&apos;: &apos;nosniff&apos;, &apos;ETag&apos;: &apos;W/&quot;5df6bac5f1f7868fcc27c33dbfd34210&quot;&apos;, &apos;Cache-Control&apos;: &apos;max-age=0, private, must-revalidate&apos;, &apos;Set-Cookie&apos;: &apos;locale=zh-CN; path=/&apos;, &apos;X-Request-Id&apos;: &apos;7d2341c7-6639-41eb-a438-71aafb5768d4&apos;, &apos;X-Runtime&apos;: &apos;0.006953&apos;, &apos;Strict-Transport-Security&apos;: &apos;max-age=31536000; includeSubDomains; preload&apos;, &apos;Content-Encoding&apos;: &apos;gzip&apos;, &apos;X-Via&apos;: &apos;1.1 yunchengwangtong83:7 (Cdn Cache Server V2.0), 1.1 PShbwhjyw5dx20:1 (Cdn Cache Server V2.0)&apos;, &apos;Connection&apos;: &apos;keep-alive&apos;&#125;&lt;class &apos;requests.cookies.RequestsCookieJar&apos;&gt; &lt;RequestsCookieJar[&lt;Cookie locale=zh-CN for www.jianshu.com/&gt;]&gt;&lt;class &apos;str&apos;&gt; https://www.jianshu.com/&lt;class &apos;list&apos;&gt; [&lt;Response [301]&gt;] 状态码判断 12response=requests.get('http://jianshu.com')exit() if not response.status_code == requests.codes.ok else print('Request Successfully') codes.ok 这里的状态码对应的是200，可以用状态码的名字方便记忆 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475100: (&apos;continue&apos;,),101: (&apos;switching_protocols&apos;,),102: (&apos;processing&apos;,),103: (&apos;checkpoint&apos;,),122: (&apos;uri_too_long&apos;, &apos;request_uri_too_long&apos;),200: (&apos;ok&apos;, &apos;okay&apos;, &apos;all_ok&apos;, &apos;all_okay&apos;, &apos;all_good&apos;, &apos;\\\\o/&apos;, &apos;✓&apos;),201: (&apos;created&apos;,),202: (&apos;accepted&apos;,),203: (&apos;non_authoritative_info&apos;, &apos;non_authoritative_information&apos;),204: (&apos;no_content&apos;,),205: (&apos;reset_content&apos;, &apos;reset&apos;),206: (&apos;partial_content&apos;, &apos;partial&apos;),207: (&apos;multi_status&apos;, &apos;multiple_status&apos;, &apos;multi_stati&apos;, &apos;multiple_stati&apos;),208: (&apos;already_reported&apos;,),226: (&apos;im_used&apos;,),# Redirection.300: (&apos;multiple_choices&apos;,),301: (&apos;moved_permanently&apos;, &apos;moved&apos;, &apos;\\\\o-&apos;),302: (&apos;found&apos;,),303: (&apos;see_other&apos;, &apos;other&apos;),304: (&apos;not_modified&apos;,),305: (&apos;use_proxy&apos;,),306: (&apos;switch_proxy&apos;,),307: (&apos;temporary_redirect&apos;, &apos;temporary_moved&apos;, &apos;temporary&apos;),308: (&apos;permanent_redirect&apos;, &apos;resume_incomplete&apos;, &apos;resume&apos;,), # These 2 to be removed in 3.0# Client Error.400: (&apos;bad_request&apos;, &apos;bad&apos;),401: (&apos;unauthorized&apos;,),402: (&apos;payment_required&apos;, &apos;payment&apos;),403: (&apos;forbidden&apos;,),404: (&apos;not_found&apos;, &apos;-o-&apos;),405: (&apos;method_not_allowed&apos;, &apos;not_allowed&apos;),406: (&apos;not_acceptable&apos;,),407: (&apos;proxy_authentication_required&apos;, &apos;proxy_auth&apos;, &apos;proxy_authentication&apos;),408: (&apos;request_timeout&apos;, &apos;timeout&apos;),409: (&apos;conflict&apos;,),410: (&apos;gone&apos;,),411: (&apos;length_required&apos;,),412: (&apos;precondition_failed&apos;, &apos;precondition&apos;),413: (&apos;request_entity_too_large&apos;,),414: (&apos;request_uri_too_large&apos;,),415: (&apos;unsupported_media_type&apos;, &apos;unsupported_media&apos;, &apos;media_type&apos;),416: (&apos;requested_range_not_satisfiable&apos;, &apos;requested_range&apos;, &apos;range_not_satisfiable&apos;),417: (&apos;expectation_failed&apos;,),418: (&apos;im_a_teapot&apos;, &apos;teapot&apos;, &apos;i_am_a_teapot&apos;),421: (&apos;misdirected_request&apos;,),422: (&apos;unprocessable_entity&apos;, &apos;unprocessable&apos;),423: (&apos;locked&apos;,),424: (&apos;failed_dependency&apos;, &apos;dependency&apos;),425: (&apos;unordered_collection&apos;, &apos;unordered&apos;),426: (&apos;upgrade_required&apos;, &apos;upgrade&apos;),428: (&apos;precondition_required&apos;, &apos;precondition&apos;),429: (&apos;too_many_requests&apos;, &apos;too_many&apos;),431: (&apos;header_fields_too_large&apos;, &apos;fields_too_large&apos;),444: (&apos;no_response&apos;, &apos;none&apos;),449: (&apos;retry_with&apos;, &apos;retry&apos;),450: (&apos;blocked_by_windows_parental_controls&apos;, &apos;parental_controls&apos;),451: (&apos;unavailable_for_legal_reasons&apos;, &apos;legal_reasons&apos;),499: (&apos;client_closed_request&apos;,),# Server Error.500: (&apos;internal_server_error&apos;, &apos;server_error&apos;, &apos;/o\\\\&apos;, &apos;✗&apos;),501: (&apos;not_implemented&apos;,),502: (&apos;bad_gateway&apos;,),503: (&apos;service_unavailable&apos;, &apos;unavailable&apos;),504: (&apos;gateway_timeout&apos;,),505: (&apos;http_version_not_supported&apos;, &apos;http_version&apos;),506: (&apos;variant_also_negotiates&apos;,),507: (&apos;insufficient_storage&apos;,),509: (&apos;bandwidth_limit_exceeded&apos;, &apos;bandwidth&apos;),510: (&apos;not_extended&apos;,),511: (&apos;network_authentication_required&apos;, &apos;network_auth&apos;, &apos;network_authentication&apos;), 高级操作上传文件 12345files=&#123; 'files': open('./favicon.ico', 'rb')&#125;response=requests.post('http://httpbin.org/post', files=files)print(response.text) 结果如下： 1234567891011121314151617181920&#123; &quot;args&quot;: &#123;&#125;, &quot;data&quot;: &quot;&quot;, &quot;files&quot;: &#123; &quot;files&quot;: &quot;data:application/octet-stream;base64,&quot; &#125;, &quot;form&quot;: &#123;&#125;, &quot;headers&quot;: &#123; &quot;Accept&quot;: &quot;*/*&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;, &quot;Connection&quot;: &quot;close&quot;, &quot;Content-Length&quot;: &quot;6666&quot;, &quot;Content-Type&quot;: &quot;multipart/form-data; boundary=25ec39a6a3e5489797021213ab1ad8aa&quot;, &quot;Host&quot;: &quot;httpbin.org&quot;, &quot;User-Agent&quot;: &quot;python-requests/2.18.4&quot; &#125;, &quot;json&quot;: null, &quot;origin&quot;: &quot;115.27.202.98&quot;, &quot;url&quot;: &quot;http://httpbin.org/post&quot;&#125; 获取cookie 1234response=requests.get('http://www.baidu.com')print(response.cookies)for key, value in response.cookies.items(): print(key+'='+value) 会话维持 模拟登录时用到 123requests.get('http://httpbin.org/cookies/set/number/123456789')response=requests.get('http://httpbin.org/cookies')print(response.text) 结果是空的： 123&#123; &quot;cookies&quot;: &#123;&#125;&#125; 因为两次get请求时独立的，可以想成在一个浏览器设置cookies，在另一个浏览器获取cookies，两个浏览器独立的。 要维持会话，requests提供了Session对象，就像在同一个浏览器中set、get 这cookies对象： 1234s=requests.Session()s.get(&apos;http://httpbin.org/cookies/set/number/123456789&apos;)response=s.get(&apos;http://httpbin.org/cookies&apos;)print(response.text) 结果是： 12345&#123; &quot;cookies&quot;: &#123; &quot;number&quot;: &quot;123456789&quot; &#125;&#125; 证书验证 12response=requests.get('https://www.12306.cn')print(response.status_code) 结果是： 12 raise SSLError(e, request=request)requests.exceptions.SSLError: HTTPSConnectionPool(host=&apos;www.12306.cn&apos;, port=443): Max retries exceeded with url: / (Caused by SSLError(SSLError(&quot;bad handshake: Error([(&apos;SSL routines&apos;, &apos;ssl3_get_server_certificate&apos;, &apos;certificate verify failed&apos;)],)&quot;,),)) 避免以上错误，关闭证书验证： 12response=requests.get('https://www.12306.cn', verify=False)print(response.status_code) 结果是： 123InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings InsecureRequestWarning)200 下面可以消除警告： 1234from requests.packages import urllib3urllib3.disable_warnings()response=requests.get('https://www.12306.cn', verify=False)print(response.status_code) 代理设置 http、https代理 构造字典数据 12345proxies=&#123; 'http': 'http://127.0.0.1:9743', 'https': 'https://127.0.0.1:9743'&#125;response=requests.get('https://www.taobao.com', proxies=proxies) socket代理 pip install requests[socks] 12345678import requestsproxies = &#123; 'http': 'socks5://127.0.0.1:9742', 'https': 'socks5://127.0.0.1:9742'&#125;response = requests.get(\"https://www.taobao.com\", proxies=proxies)print(response.status_code) 超时设置 123456789import requestsfrom requests.exceptions import ReadTimeouttry: # 设置必须在500ms内收到响应，不然或抛出ReadTimeout异常 response = requests.get(\"http://httpbin.org/get\", timeout=0.5) print(response.status_code)except ReadTimeout: print('Timeout') 认证设置 有些网站会调出对话框，要求输入用户名、密码 123456import requestsfrom requests.auth import HTTPBasicAuthr = requests.get('http://120.27.34.24:9001', auth=HTTPBasicAuth('user', '123'))# r = requests.get('http://120.27.34.24:9001', auth=('user', '123'))print(r.status_code) 异常处理 1234567891011import requestsfrom requests.exceptions import ReadTimeout, ConnectionError, RequestExceptiontry: response = requests.get(\"http://httpbin.org/get\", timeout = 0.5) print(response.status_code)except ReadTimeout: print('Timeout')except ConnectionError: print('Connection error')except RequestException: print('Error')","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://yoursite.com/tags/爬虫/"}]},{"title":"'爬虫系列2:python中的正则表达式'","slug":"爬虫","date":"2018-03-29T12:35:47.000Z","updated":"2018-04-03T09:38:27.630Z","comments":true,"path":"2018/03/29/爬虫/","link":"","permalink":"http://yoursite.com/2018/03/29/爬虫/","excerpt":"","text":"目录 re中的常用函数 正则表达式的组成 模式修正符 &emsp;&emsp;正则表达式(Regular Expression)是对字符串（包括普通字符（例如，a 到 z 之间的字母）和特殊字符（称为“元字符”））操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。正则表达式是一种文本模式，模式描述在搜索文本时要匹配的一个或多个字符串。 &emsp;&emsp;这里我们主要说下python中的正则表达式.python为我们提供了名为re的模块，这样我们就可以在python下使用着正则表达式的功能了。 &emsp;&emsp;既然是模块当然为我们提供了一系列方法，而在使用正则表达式方法时要关注三点。首先是要匹配的正则表达式即模式字符串，也就是我们要找什么，我们把要找的东西根据规定好的规则写出来，称为pattern；其次就是，我们要在哪里找，我们在目标字符串里找，即string；最后，还有一个标志位flag，即正则表达式修饰符,也叫模式修正符，它规定了我们怎么找，比如要不要忽略大小写、要不要匹配换行符（默认不匹配）。 2.1 re中的常用函数&emsp;&emsp;我们一个个说，先说说re模块中的函数。 2.1.1 re.compile(pattern[, flag])和re.sub(pattern, repl, string, count=0, flags=0)compile函数用于编译正则表达式，生成一个Pattern对象，Pattern对象有一系列的方法，常用的有： match(string[, pos[, endpos]])方法 search(string[, pos[, endpos]])方法 findall(string[, pos[, endpos]])方法 finditer(string[, pos[, endpos]])方法 split(string[, maxsplit])方法 sub(repl, string[, count])方法 match(string[, pos[, endpos]]) 如果没有指定pos和endpos，默认为0和len(string)，即match函数将会从头部(左侧第一个字符)开始进行匹配，若匹配成功将返回Match对象，没有匹配成功，则返回None。 search(string[, pos[, endpos]]) 与match的差别是可以从任何地方开始，只要待匹配的字符串中有可匹配对象，就会匹配成功，返回Match对象。也是只匹配一次。 上面的方法只匹配一次，如果我们想把字符串中所有匹配的情况都找出来该怎么办办呢？我们可以使用findall(string,[, pos[, endpos]]),findall会找到所有能够匹配的结果，结果是以列表形式返回的所有子串。 小括号和group search和match中的pattern中有括号会形成group，多个括号就有多个group 只有match对象有group()和groups()，列表没有，因此只有search和match函数可以用group，findall没有group，小括号的含义也不一样。 12345678910111213import reline = \"Cats are smarter than dogs\";searchObj = re.search(r'(.*) are (.*?) .*', line, re.M | re.I)if searchObj: print(\"searchObj.group() : \", searchObj.group()) # 显示全部 print(\"searchObj.group(1) : \", searchObj.group(1)) # 显示第一组，对应第一个括号 print(\"searchObj.group(2) : \", searchObj.group(2)) # 显示第二组，对应第二个括号 print(\"searchObj.group(2) : \", searchObj.group(1, 2)) # 显示两组，以元组形式返回 print(\"searchObj.groups() : \", searchObj.groups()) # 显示所有的组，以元组形式返回，因为只有两组，结果和group(1, 2)相同 print(\"Nothing found!!\") 结果是： searchObj.group() : Cats are smarter than dogs searchObj.group(1) : Cats searchObj.group(2) : smarter searchObj.group(1, 2) : (&apos;Cats&apos;, &apos;smarter&apos;) searchObj.groups() : (&apos;Cats&apos;, &apos;smarter&apos;) 如果没有小括号，可以用group()显示全部，但里面不能有数字，因为没有分组。 12345678910111213141516171819&gt;&gt;&gt; import re&gt;&gt;&gt; pattern = re.compile(r'\\d+') # 用于匹配至少一个数字&gt;&gt;&gt; m = pattern.match('one12twothree34four') # 查找头部，没有匹配&gt;&gt;&gt; print mNone&gt;&gt;&gt; m = pattern.match('one12twothree34four', 2, 10) # 从'e'的位置开始匹配，没有匹配&gt;&gt;&gt; print mNone&gt;&gt;&gt; m = pattern.match('one12twothree34four', 3, 10) # 从'1'的位置开始匹配，正好匹配&gt;&gt;&gt; print m # 返回一个 Match 对象&lt;_sre.SRE_Match object at 0x10a42aac0&gt;&gt;&gt;&gt; m.group(0) # 可省略 0'12'&gt;&gt;&gt; m.start(0) # 可省略 03&gt;&gt;&gt; m.end(0) # 可省略 05&gt;&gt;&gt; m.span(0) # 可省略 0(3, 5) group([group1, …]) 方法用于获得一个或多个分组匹配的字符串，当要获得整个匹配的子串时，可直接使用 group() 或 group(0)；[group1]即1. start([group]) 方法用于获取分组匹配的子串在整个字符串中的起始位置（子串第一个字符的索引），参数默认值为 0； end([group]) 方法用于获取分组匹配的子串在整个字符串中的结束位置（子串最后一个字符的索引+1），参数默认值为 0； span([group]) 方法返回 (start(group), end(group))。 findall中的pattern用小括号，会只返回小括号中的匹配的东西，形成元组列表 import re a = &quot;123abc456899opopo&quot; pat = &apos;12(.*?)4(.*?)po&apos; res = re.compile(pat).findall(a) print(res) 结果是： [(&apos;3abc&apos;, &apos;56899o&apos;)] finditer(string[, pos[, endpos]])和findall()功能一样，也是搜索所有匹配情况，区别是finditer返回一个顺序访问每一个匹配结果的迭代器。 1234567891011121314# -*- coding: utf-8 -*-import repattern = re.compile(r'\\d+')result_iter1 = pattern.finditer('hello 123456 789')result_iter2 = pattern.finditer('one1two2three3four4', 0, 10)print(type(result_iter1))print(type(result_iter2))print('result1...')for m1 in result_iter1: # m1 是 Match 对象 print('matching string: &#123;&#125;, position: &#123;&#125;'.format(m1.group(), m1.span()))print('result2...')for m2 in result_iter2: print('matching string: &#123;&#125;, position: &#123;&#125;'.format(m2.group(), m2.span())) 结果如下： &lt;class &apos;callable_iterator&apos;&gt; &lt;class &apos;callable_iterator&apos;&gt; result1... matching string: 123456, position: (6, 12) matching string: 789, position: (13, 16) result2... matching string: 1, position: (3, 4) matching string: 2, position: (7, 8) split(string[, maxsplit]) split函数根据能够匹配的子串来分割字符串，结果以列表形式返回。 12345import rep = re.compile(r'a')res = p.split('abcadeacd')print(res) 结果是： [&apos;&apos;, &apos;bc&apos;, &apos;de&apos;, &apos;cd&apos;] ‘a’被去除，’a’左右两侧的子串被装进列表中返回。 sub(repl, string[, count]) sub方法的功能是替换，返回替换后的字符串。 其中，repl 可以是字符串也可以是一个函数： 如果 repl 是字符串，则会使用 repl 去替换字符串每一个匹配的子串，并返回替换后的字符串，另外，repl 还可以使用 \\id 的形式来引用分组，但不能使用编号 0； 如果 repl 是函数，这个方法应当只接受一个参数（Match 对象），并返回一个字符串用于替换（返回的字符串中不能再引用分组）。 count 用于指定最多替换次数，不指定时全部替换。 1234567891011121314import rep = re.compile(r'(\\w+) (\\w+)')s = 'hello 123, hello 456'def func(m): return 'hi' + ' ' + m.group(2)print(p.sub(r'hello world', s) ) # 使用 'hello world' 替换 'hello 123' 和 'hello 456'print(p.sub(r'\\2 \\1', s)) # 引用分组print(p.sub(func, s)) # sub会把匹配到的match对象传给func 替换之前肯定要先匹配print(p.sub(func, s, 1)) # 最多替换一次 结果是： hello world, hello world 123 hello, 456 hello hi 123, hi 456 hi 123, hello 456 对比： re.sub(pattern, repl, string, count=0, flags=0)三个必选参数：pattern, repl, string pattern： 若在patter中有\\number写法，则是要匹配其中分组，如下写法 inputStr = “hello crifan, nihao crifan”; replacedStr = re.sub(r”o (\\w+), nihao \\1”, “crifanli”, inputStr); print(replacedStr) 结果是： hellcrifanli 和repl中\\number不一样， 见下面 s = ‘2017-01-22’ s = re.sub(‘(\\d{4})-(\\d{2})-(\\d{2})’, r’\\2-\\3-\\1’, s) print s # 01-22-2017 第二个参数：repl repl，就是replacement，被替换，的字符串的意思。 repl可以是字符串，也可以是函数。 repl是字符串 如果repl是字符串的话，其中的任何反斜杠转义字符，都会被处理的。 即： \\n：会被处理为对应的换行符； \\r：会被处理为回车符； 其他不能识别的转移字符，则只是被识别为普通的字符： 比如\\j，会被处理为j这个字母本身； 反斜杠加g以及中括号内一个名字，即：\\g，对应着命了名的组，named group 接着上面的举例： 想要把对应的： hello crifan, nihao crifan 中的crifan提取出来，只剩：crifan 就可以写成： inputStr = &quot;hello crifan, nihao crifan&quot;; replacedStr = re.sub(r&quot;hello (\\w+), nihao \\1&quot;, &quot;\\g&lt;1&gt;&quot;, inputStr); print &quot;replacedStr=&quot;,replacedStr; #crifan repl是函数 - hello 123 world 456 想要把其中的数字部分，都加上111，变成： hello 234 world 567 123456789101112131415161718192021222324252627 #!/usr/bin/python # -*- coding: utf-8 -*- import re; def pythonReSubDemo(): \"\"\" demo Pyton re.sub \"\"\" inputStr = \"hello 123 world 456\"; def _add111(matched): intStr = matched.group(\"number\"); #123 intValue = int(intStr); addedValue = intValue + 111; #234 addedValueStr = str(addedValue); return addedValueStr; replacedStr = re.sub(\"(?P&lt;number&gt;\\d+)\", _add111, inputStr); print \"replacedStr=\",replacedStr; #hello 234 world 567 ############################################################################### if __name__==\"__main__\": pythonReSubDemo();subn(repl, string[, count]) 它返回一个元组： (sub(repl, string[, count]), 替换次数) 元组有两个元素，第一个元素是使用 sub 方法的结果，第二个元素返回原字符串被替换的次数。 看看例子： 12345678910import rep = re.compile(r'(\\w+) (\\w+)')s = 'hello 123, hello 456'def func(m): return 'hi' + ' ' + m.group(2)print p.subn(r'hello world', s)print p.subn(r'\\2 \\1', s)print p.subn(func, s)print p.subn(func, s, 1) 执行结果是： (&apos;hello world, hello world&apos;, 2) (&apos;123 hello, 456 hello&apos;, 2) (&apos;hi 123, hi 456&apos;, 2) (&apos;hi 123, hello 456&apos;, 1) 2.1.2 match 函数re.match(pattern, string[, flags]): 其中，pattern 是正则表达式的字符串形式，比如 \\d+, [a-z]+。 而 Pattern 对象的 match 方法使用形式是： match(string[, pos[, endpos]]) 可以看到，match 函数不能指定字符串的区间，它只能搜索头部，看看例子： 123456789101112import rem1 = re.match(r'\\d+', 'One12twothree34four')if m1: print 'matching string:',m1.group()else: print 'm1 is:',m1m2 = re.match(r'\\d+', '12twothree34four')if m2: print 'matching string:', m2.group()else: print 'm2 is:',m2 结果是： m1 is: None matching string: 12 2.1.3 search 函数re.search(pattern, string[, flags]) 也是不能指定区间 2.1.4 findall 函数用哪种方式 从上文可以看到，使用 re 模块有两种方式： 使用 re.compile 函数生成一个 Pattern 对象，然后使用 Pattern 对象的一系列方法对文本进行匹配查找； 直接使用 re.match, re.search 和 re.findall 等函数直接对文本匹配查找； 下面，我们用一个例子展示这两种方法。 先看第 1 种用法： 123456import re# 将正则表达式先编译成 Pattern 对象pattern = re.compile(r'\\d+')print pattern.match('123, 123')print pattern.search('234, 234')print pattern.findall('345, 345') 再看第2种： 1234import reprint re.match(r'\\d+', '123, 123')print re.search(r'\\d+', '234, 234')print re.findall(r'\\d+', '345, 345') 如果一个正则表达式需要用到多次（比如上面的 \\d+），在多种场合经常需要被用到，出于效率的考虑，我们应该预先编译该正则表达式，生成一个 Pattern 对象，再使用该对象的一系列方法对需要匹配的文件进行匹配；而如果直接使用 re.match, re.search 等函数，每次传入一个正则表达式，它都会被编译一次，效率就会大打折扣。 因此，我们推荐使用第 1 种用法。 2.2 pattern pattern由原子和元字符组成的。 2.2.1 原子原子是正则表达式中最基本的组成单元，每个正则表达式中至少包含一个原子。常见的原子类型有： 普通字符 非打印字符 即pattern中可以包含换行符和制表符 通用字符 原子表 常用通用字符 通用字符 描述 \\w匹配字母、数字、下划线 \\W匹配除字母、数字、下划线外任意字符 \\d匹配十进制数字，等价于[0-9] \\D匹配任意非十进制数字 \\s匹配空白字符 \\S匹配非空白字符 原子表 用中括号把多个原子括起来组成一个表，各原子地位平等。 举例 描述 [Pp]ython匹配 “Python” 或 “python” [0-9]匹配匹配任何数字。类似于 [0123456789] [a-z]匹配任何小写字母 [A-Z]匹配任何大写字母 [a-zA-Z0-9]匹配任何字母及数字 [^0-9]匹配除了数字外的字符 2.2.2 元字符正则表达式中有一些特殊含义的字符。 元字符 描述 .匹配除换行符以外的任意字符 ^在原子表中是非，不在原子表中表示匹配开始位置 $匹配结束位置 *0次、1次或多次重复前面的原子 ？0次或1次 +1次或多次 {n}恰好n次 {n,}至少n次 {n,m}至少n次，至多m次 |或 ()匹配括号内的表达式，一些情况下也表示组 贪婪模式和懒惰模式：默认是贪婪模式，即尽可能的多匹配，我们可以用？变为懒惰模式。 2.3 模式修正符模式修正符 模式修正符 描述 I匹配时忽略大小写 M多行匹配 L本地化识别 Uunicode S让.匹配包括多行 \\S匹配非空白字符 后续： 3 xpath表达式4 json数据处理5 urllib初体验6 http基本知识7 基本的反爬措施8 模拟登陆9 scrapy框架10 分布式爬虫","categories":[{"name":"python","slug":"python","permalink":"http://yoursite.com/categories/python/"}],"tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"http://yoursite.com/tags/正则表达式/"}]},{"title":"new article","slug":"new-article","date":"2018-03-28T07:36:42.000Z","updated":"2018-03-28T07:36:42.051Z","comments":true,"path":"2018/03/28/new-article/","link":"","permalink":"http://yoursite.com/2018/03/28/new-article/","excerpt":"","text":"","categories":[],"tags":[]}]}